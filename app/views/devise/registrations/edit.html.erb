<style>
    /*.change-pwd-btn*/
    /*{*/
    /*background:linear-gradient(to bottom, #45484d 0%,#000000 100%) !important;*/
    /*color:white !important;*/
    /*width: 12%;*/
    /*font-size: 1.4em;*/
    /*padding: 1%;*/
    /*}*/

    .custom-input-field-style{
        margin-bottom: -1px;
        border:1px;
        /*border-radius:7px;*/
        background-color: #c7c5c5;
    }

    label{
        margin-bottom: 0;
        margin-top: 14px;
    }
</style>

<!--<h2>Edit <%#= resource_name.to_s.humanize %></h2>-->


<div class="row">
  <div class="col-sm-6 col-md-4 col-md-offset-4">
    <div class="account-wall">
      <h3 class="form_heading">Create an account</h3>
      <img src="/assets/line.png" class="line_style">

      <%= form_for(resource, as: resource_name, url: registration_path(resource_name),html: { method: :put }) do |f| %>
          <%= devise_error_messages! %>

          <div style="display: none;">
            <%= f.label :email %><br />
            <%= f.email_field :email %>
          </div>

          <% if devise_mapping.confirmable? && resource.pending_reconfirmation? %>
              <div>Currently waiting confirmation for: <%= resource.unconfirmed_email %></div>
          <% end %>

          <div>
            <%= f.label :password %> <i>(leave blank if you don't want to change it)</i><br />
            <%= f.password_field :password, autocomplete: "off",:placeholder => " New Password ", :class=>"custom-input-field-style form-control" %>
          </div>

          <div>
            <%= f.label :password_confirmation %><br />
            <%= f.password_field :password_confirmation, :placeholder => "Password confirmation" ,autocomplete: "off", :class=>"custom-input-field-style form-control" %>
          </div>

          <div>
            <%= f.label :current_password %> <i><br>(we need your current password to confirm your changes)</i><br />
            <%= f.password_field :current_password, autocomplete: "off", :placeholder => "Current Password",:class=>"custom-input-field-style form-control" %>
          </div>

          <br>
          <div>
            <%= f.submit "Update", :class=>"change-pwd-btn btn btn-lg  btn-block button_style" %>
          </div>
          <p class="text-center" style="color: #ffffff"><%= link_to "Back", :back,:class=>"text-style"%></p>
      <% end %>

      <!--<h3>Cancel my account</h3>-->

      <!--<p>Unhappy? <%#= button_to "Cancel my account", registration_path(resource_name), data: { confirm: "Are you sure?" }, method: :delete %></p>-->

    </div>
  </div>
</div>

<script>
    /*! http://mths.be/placeholder v2.0.8 by @mathias */
    ;(function(window, document, $) {

        var isOperaMini = Object.prototype.toString.call(window.operamini) == '[object OperaMini]';
        var isInputSupported = 'placeholder' in document.createElement('input') && !isOperaMini;
        var isTextareaSupported = 'placeholder' in document.createElement('textarea') && !isOperaMini;
        var prototype = $.fn;
        var valHooks = $.valHooks;
        var propHooks = $.propHooks;
        var hooks;
        var placeholder;

        if (isInputSupported && isTextareaSupported) {

            placeholder = prototype.placeholder = function() {
                return this;
            };

            placeholder.input = placeholder.textarea = true;

        } else {

            placeholder = prototype.placeholder = function() {
                var $this = this;
                $this
                        .filter((isInputSupported ? 'textarea' : ':input') + '[placeholder]')
                        .not('.placeholder')
                        .bind({
                            'focus.placeholder': clearPlaceholder,
                            'blur.placeholder': setPlaceholder
                        })
                        .data('placeholder-enabled', true)
                        .trigger('blur.placeholder');
                return $this;
            };

            placeholder.input = isInputSupported;
            placeholder.textarea = isTextareaSupported;

            hooks = {
                'get': function(element) {
                    var $element = $(element);

                    var $passwordInput = $element.data('placeholder-password');
                    if ($passwordInput) {
                        return $passwordInput[0].value;
                    }

                    return $element.data('placeholder-enabled') && $element.hasClass('placeholder') ? '' : element.value;
                },
                'set': function(element, value) {
                    var $element = $(element);

                    var $passwordInput = $element.data('placeholder-password');
                    if ($passwordInput) {
                        return $passwordInput[0].value = value;
                    }

                    if (!$element.data('placeholder-enabled')) {
                        return element.value = value;
                    }
                    if (value == '') {
                        element.value = value;
                        // Issue #56: Setting the placeholder causes problems if the element continues to have focus.
                        if (element != safeActiveElement()) {
                            // We can't use `triggerHandler` here because of dummy text/password inputs :(
                            setPlaceholder.call(element);
                        }
                    } else if ($element.hasClass('placeholder')) {
                        clearPlaceholder.call(element, true, value) || (element.value = value);
                    } else {
                        element.value = value;
                    }
                    // `set` can not return `undefined`; see http://jsapi.info/jquery/1.7.1/val#L2363
                    return $element;
                }
            };

            if (!isInputSupported) {
                valHooks.input = hooks;
                propHooks.value = hooks;
            }
            if (!isTextareaSupported) {
                valHooks.textarea = hooks;
                propHooks.value = hooks;
            }

            $(function() {
                // Look for forms
                $(document).delegate('form', 'submit.placeholder', function() {
                    // Clear the placeholder values so they don't get submitted
                    var $inputs = $('.placeholder', this).each(clearPlaceholder);
                    setTimeout(function() {
                        $inputs.each(setPlaceholder);
                    }, 10);
                });
            });

            // Clear placeholder values upon page reload
            $(window).bind('beforeunload.placeholder', function() {
                $('.placeholder').each(function() {
                    this.value = '';
                });
            });

        }

        function args(elem) {
            // Return an object of element attributes
            var newAttrs = {};
            var rinlinejQuery = /^jQuery\d+$/;
            $.each(elem.attributes, function(i, attr) {
                if (attr.specified && !rinlinejQuery.test(attr.name)) {
                    newAttrs[attr.name] = attr.value;
                }
            });
            return newAttrs;
        }

        function clearPlaceholder(event, value) {
            var input = this;
            var $input = $(input);
            if (input.value == $input.attr('placeholder') && $input.hasClass('placeholder')) {
                if ($input.data('placeholder-password')) {
                    $input = $input.hide().next().show().attr('id', $input.removeAttr('id').data('placeholder-id'));
                    // If `clearPlaceholder` was called from `$.valHooks.input.set`
                    if (event === true) {
                        return $input[0].value = value;
                    }
                    $input.focus();
                } else {
                    input.value = '';
                    $input.removeClass('placeholder');
                    input == safeActiveElement() && input.select();
                }
            }
        }

        function setPlaceholder() {
            var $replacement;
            var input = this;
            var $input = $(input);
            var id = this.id;
            if (input.value == '') {
                if (input.type == 'password') {
                    if (!$input.data('placeholder-textinput')) {
                        try {
                            $replacement = $input.clone().attr({ 'type': 'text' });
                        } catch(e) {
                            $replacement = $('<input>').attr($.extend(args(this), { 'type': 'text' }));
                        }
                        $replacement
                                .removeAttr('name')
                                .data({
                                    'placeholder-password': $input,
                                    'placeholder-id': id
                                })
                                .bind('focus.placeholder', clearPlaceholder);
                        $input
                                .data({
                                    'placeholder-textinput': $replacement,
                                    'placeholder-id': id
                                })
                                .before($replacement);
                    }
                    $input = $input.removeAttr('id').hide().prev().attr('id', id).show();
                    // Note: `$input[0] != input` now!
                }
                $input.addClass('placeholder');
                $input[0].value = $input.attr('placeholder');
            } else {
                $input.removeClass('placeholder');
            }
        }

        function safeActiveElement() {
            // Avoid IE9 `document.activeElement` of death
            // https://github.com/mathiasbynens/jquery-placeholder/pull/99
            try {
                return document.activeElement;
            } catch (err) {}
        }
    }(this, document, jQuery));

    $('input, textarea').placeholder();
    function validateForm(){
        $('#form-validation-row').toggle(!$('#form').parsley().validate());
    }
</script>